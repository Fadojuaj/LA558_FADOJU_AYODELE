geom_col(color = "navy", fill = "navy", alpha = 0.5) +
labs(title = "TOP 5 counties in IOWA by Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 6) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_col(color = "navy", fill = "navy", alpha = 0.1) +
labs(title = "TOP 5 counties in IOWA by Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 11) +
coord_flip()
ggplot(ia_income_top5,
aes(x = estimate,
y = reorder(NAME, estimate))) +
geom_col() +
labs(title = "Median household income for Counties, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "ACS estimate",
y = "") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_col(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "TOP 5 counties in IOWA by Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_histogram(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_col(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_col(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ia_income_Fivehighs <- ia_income %>%
top_n(5, estimate) %>%
arrange(desc(estimate))
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_col(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_top5, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_Fivehighs, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_Fivehighs, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_bar(stat = "identity", color = "Blue", fill = "Red", alpha = 0.5) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
theme_minimal(base_size = 14) +
coord_flip()
ggplot(ia_income_Fivehighs, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5, width = 0.5, stat = "identity") +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
coord_flip() +
theme_minimal(base_size = 14)
ggplot(ia_income_Fivehighs, aes(x = reorder(NAME, estimate), y = estimate)) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5, stat = "identity") +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "County",
y = "Median Income",
caption = "Source: ACS 2016-2020") +
coord_flip() +
theme_minimal(base_size = 14)
ggplot(ia_income_Fivehighs, aes(x = reorder(NAME, estimate), y = estimate)) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5, width = 0.3, stat = "identity") +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "County",
y = "Median Income",
caption = "Source: ACS 2016-2020") +
coord_flip() +
theme_minimal(base_size = 14)
ggplot(ia_income_Fivehighs, aes(x = reorder(NAME, estimate), y = estimate)) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5, width = 0.5, stat = "identity") +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "County",
y = "Median Income",
caption = "Source: ACS 2016-2020") +
coord_flip() +
theme_minimal(base_size = 14)
# Create a vector of fill colors
fill_colors <- c("Red", "Green", "Blue", "Yellow", "Purple")
# Plot the data with different fill colors for each county
ggplot(ia_income_Fivehighs, aes(x = estimate, y = reorder(NAME, estimate), fill = NAME)) +
geom_bar(color = "Blue", alpha = 0.5, width = 0.5, stat = "identity") +
scale_fill_manual(values = fill_colors) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
coord_flip() +
theme_minimal(base_size = 14)
ggplot(ia_income_Fivehighs, aes(x = estimate, y = reorder(NAME, estimate))) +
geom_bar(color = "Blue", fill = "Red", alpha = 0.5, width = 0.5, stat = "identity", show.legend = FALSE) +
labs(title = "Median Household Income, 2016-2020 ACS",
subtitle = "Five Counties with high Income in Iowa",
x = "Median Income",
y = "County",
caption = "Source: ACS 2016-2020") +
coord_flip() +
scale_fill_manual(values = c("Blue", "Red")) +
theme_minimal(base_size = 14)
install.packages("idbr")
library(idbr)
africa_data <- life_exp_data %>%
filter(continent == "Africa") %>%
select(country_code, life_expectancy)
world_life_exp_data <- left_join(world_data, africa_data, by = c("region" = "country_code"))
if (!require("idbr")) {
install.packages("idbr")
}
if (!require("getTBinR")) {
install.packages("getTBinR")
}
# load libraries
library(idbr)
library(getTBinR)
install.packages("getTBinR")
install.packages("idbr")
install.packages("idbr")
library(idbr)
library(getTBinR)
install.packages("getTBinR")
library(getTBinR)
nigeria_life_expectancy <- get_idb(
country = "Nigeria",
indicator = "Life expectancy at birth, total",
year = 2021
)
library(WDI)
install.packages("WDI")
library(WDI)
nigeria_life_expectancy <- get_wb(indicator = "SP.DYN.LE00.IN", country = "NGA", startdate = 2021, enddate = 2021)
library(WDI)
nigeria_life_expectancy <- get_wb(indicator = "SP.DYN.LE00.IN", country = "NGA", startdate = 2021, enddate = 2021)
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("rnaturalearthdata")
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
nigeria_map <- ne_states(country = "Nigeria", returnclass = "sf")
nigeria_map <- ne_states(country = "Nigeria", returnclass = "sf")
nigeria_map <- dplyr::left_join(nigeria_map, nigeria_life_expectancy, by = c("name" = "Region"))
nigeria_map <- ne_states(country = "Nigeria", returnclass = "sf")
View(nigeria_map)
nigeria_map <- dplyr::left_join(nigeria_map, nigeria_life_expectancy, by = c("name" = "Region"))
vars <- load_variables(2021, "acs5")
vars <- load_variables(2021, "acs5")
library(tidycensus)
library(tidyverse)
vars <- load_variables(2021, "acs5")
View(vars)
Educational_attainment <- get_acs(
geography = "county",
state = "Georgia",
variables = "B15003_022",
summary_var = "B15003_001",
year = 2021,
geometry = TRUE
)
View(Educational_attainment)
plot(Educational_attainment["estimate"])
Educational_attainment <- Educational_attainment %>%
mutate(percent = round(estimate/ summary_est, 3)*100)
plot(Educational_attainment["percent"])
plot1 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_colour_brewer(palette = "Spectral") +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot1
plot1 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_colour_brewer(palette = "Oranges") +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot1
plot(Educational_attainment["percent"])
plot1 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_colour_brewer(palette = "Oranges") +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot1
vars <- load_variables(2021, "acs5")
View(vars)
Educational_attainment <- get_acs(
geography = "county",
state = "Georgia",
variables = "B15003_022",
summary_var = "B15003_001",
year = 2021,
geometry = TRUE
)
View(Educational_attainment)
plot(Educational_attainment["estimate"])
Educational_attainment <- Educational_attainment %>%
mutate(percent = round(estimate/ summary_est, 3)*100)
plot(Educational_attainment["percent"])
plot1 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_fill_brewer(palette = "Oranges") +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot1
View(nigeria_map)
plot1 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_fill_brewer(palette = "Oranges") +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot1
plot2 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_fill_gradientn(colors = c("white", "orange")) +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot2
plot2 <- ggplot(data = Educational_attainment) +
geom_sf(aes(fill = percent)) +
scale_fill_gradientn(colors = c("white", "orange")) +
coord_sf(crs = "+init=epsg:3081") +
labs(title = "Percent of population with educational attainment of
bachelor's degree or higher", fill="percent") +
theme(rect = element_blank(), axis.ticks = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
plot2
library(readr)
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
ggplot(employment_data_long, aes(x = year, y = value, group = Employment_opportunities, fill = Employment_opportunities)) +
geom_point(stat = "identity", size = 8, shape = 21, color = "white") +
scale_fill_hue() +
coord_polar(theta = "y") +
theme_minimal() +
labs(title = "Employment by Industry", x = NULL, y = NULL, fill = NULL) +
theme(legend.position = "bottom", axis.text.y = element_blank(), axis.ticks.y = element_blank())
names()
names("Employment_By_Industry.csv")
col_names("Employment_By_Industry.csv")
View(plot2)
# read data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# melt data
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
# plot
ggplot(employment_data_long, aes(x = factor(1), y = value, fill = Employment_opportunities)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
facet_wrap(vars(year), ncol = 5) +
scale_fill_hue() +
labs(title = "Employment by Industry", fill = NULL)
install.packages("treemapify")
library(treemapify)
# format data for treemap
treemap_data <- employment_data %>%
mutate(Change_2010_2021 = as.numeric(gsub(",", "", Change_2010_2021))) %>%
select(Employment_opportunities, Year_2021, Change_2010_2021) %>%
rename(Size = Year_2021, Color = Change_2010_2021)
ggplot(treemap_data, aes(area = Size, fill = Color, label = Employment_opportunities)) +
geom_treemap() +
geom_treemap_text(fontface = "bold", colour = "white", place = "centre", grow = TRUE) +
scale_fill_gradientn(colours = c("red", "white", "green"), na.value = "grey") +
labs(title = "Employment by Industry", fill = "Change 2010-2021") +
theme_void()
# read data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# melt data
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
# plot
ggplot(employment_data_long, aes(x = factor(1), y = value, fill = Employment_opportunities)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
facet_wrap(vars(year), ncol = 5) +
scale_fill_hue() +
labs(title = "Employment by Industry", fill = NULL)
View(treemap_data)
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
ggplot(employment_data_long, aes(x = Employment_opportunities, y = value)) +
geom_boxplot(fill = "lightblue", color = "blue") +
labs(title = "Employment by Industry", x = "Industry", y = "Number of Employees") +
theme_minimal()
# read data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# melt data
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
# plot
ggplot(employment_data_long, aes(x = factor(1), y = value, fill = Employment_opportunities)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
facet_wrap(vars(year), ncol = 5) +
scale_fill_hue() +
labs(title = "Employment by Industry", fill = NULL)
library(plotly)
# Load data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# Format data for histogram
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
# Create interactive histogram
p <- ggplot(employment_data_long, aes(x = value, fill = Employment_opportunities)) +
geom_histogram(binwidth = 500) +
facet_wrap(~ year, ncol = 3) +
labs(title = "Employment by Industry", x = NULL, y = "Count", fill = "Employment Opportunities") +
theme_minimal()
ggplotly(p)
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
ggplot(employment_data_long, aes(x = year, y = value, fill = Employment_opportunities)) +
geom_col(position = "dodge") +
scale_fill_manual(values = c("green", "red", "blue", "purple", "orange", "pink", "brown", "gray", "yellow", "cyan", "magenta", "darkgreen", "darkred", "darkblue", "darkpurple", "darkorange", "darkpink", "darkbrown", "darkgray", "lightgreen")) +
labs(title = "Employment by Industry", x = NULL, y = "Number of Jobs") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
scale_y_continuous(limits = c(-20000, 40000), breaks = seq(-20000, 40000, by = 5000))
# format data for circular stacked barchart
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
ggplot(employment_data_long, aes(x = year, y = value, group = Employment_opportunities, fill = Employment_opportunities)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.8) +
scale_fill_brewer(palette = "Paired") +
coord_flip() +
labs(title = "Employment by Industry", x = NULL, y = "Number of Jobs") +
theme_minimal()
# Load data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
employment_data <- employment_data %>%
mutate(Sector = if_else(Employment_opportunities %in% c("Farm", "Construction", "Manufacturing"),
"Non-service sector",
if_else(Employment_opportunities == "Government",
"Government",
"Service sector"))) %>%
group_by(Sector) %>%
summarise(Year_2001 = sum(Year_2001),
Year_2010 = sum(Year_2010),
Year_2021 = sum(Year_2021),
Change_2010_2021 = sum(Change_2010_2021)) %>%
ungroup()
# Load data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
employment_data <- employment_data %>%
mutate(Sector = if_else(Employment_opportunities %in% c("Farm", "Construction", "Manufacturing"),
"Non-service sector",
if_else(Employment_opportunities == "Government",
"Government",
"Service sector"))) %>%
group_by(Sector) %>%
summarise(Year_2001 = sum(Year_2001),
Year_2010 = sum(Year_2010),
Year_2021 = sum(Year_2021),
Change_2010_2021 = sum(as.numeric(Change_2010_2021))) %>%
ungroup()
# Load data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# Create a new column called Sector
employment_data <- employment_data %>%
mutate(Sector = if_else(Employment_opportunities %in% c("Farm", "Construction", "Manufacturing"),
"Non-service sector",
if_else(Employment_opportunities == "Government",
"Government",
"Service sector")))
# Summarize the data by sector and year
employment_data_summary <- employment_data %>%
group_by(Sector) %>%
summarise(Year_2001 = sum(Year_2001),
Year_2010 = sum(Year_2010),
Year_2021 = sum(Year_2021),
Change_2010_2021 = sum(as.numeric(Change_2010_2021))) %>%
ungroup()
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# Create a new column called Sector
employment_data <- employment_data %>%
mutate(Sector = if_else(Employment_opportunities %in% c("Farm", "Construction", "Manufacturing"),
"Non-service sector",
if_else(Employment_opportunities == "Government",
"Government",
"Service sector"))) %>%
group_by(Sector) %>%
summarise(Year_2001 = sum(Year_2001),
Year_2010 = sum(Year_2010),
Year_2021 = sum(Year_2021),
Change_2010_2021 = sum(as.numeric(Change_2010_2021))) %>%
ungroup()
# Load data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# Create a new column called Sector
employment_data <- employment_data %>%
mutate(Sector = if_else(Employment_opportunities %in% c("Farm", "Construction", "Manufacturing"),
"Non-service sector",
if_else(Employment_opportunities == "Government",
"Government",
"Service sector"))) %>%
# Summarize the data by sector and year
employment_data_summary <- employment_data %>%
group_by(Sector) %>%
summarise(Year_2001 = sum(Year_2001),
Year_2010 = sum(Year_2010),
Year_2021 = sum(Year_2021),
Change_2010_2021 = sum(as.numeric(Change_2010_2021))) %>%
ungroup()
# read data
employment_data <- read.csv("Employment_By_Industry.csv", stringsAsFactors = FALSE)
# melt data
employment_data_long <- employment_data %>%
pivot_longer(cols = -c(Employment_opportunities, Change_2010_2021), names_to = "year", values_to = "value") %>%
mutate(year = str_replace(year, "Year_", ""))
# plot
ggplot(employment_data_long, aes(x = factor(1), y = value, fill = Employment_opportunities)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
theme_void() +
facet_wrap(vars(year), ncol = 5) +
scale_fill_hue() +
labs(title = "Changes in Employment by Industry", fill = NULL)
